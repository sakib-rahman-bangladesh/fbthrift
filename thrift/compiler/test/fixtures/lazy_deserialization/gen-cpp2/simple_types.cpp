/**
 * Autogenerated by Thrift for src/simple.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/lazy_deserialization/gen-cpp2/simple_types.h"
#include "thrift/compiler/test/fixtures/lazy_deserialization/gen-cpp2/simple_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/lazy_deserialization/gen-cpp2/simple_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::Foo>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::Foo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace test {

Foo::Foo(const Foo& srcObj) {
  std::lock_guard<std::mutex> lock(srcObj.__fbthrift_deserializationMutex_);
  __fbthrift_protocol_ = srcObj.__fbthrift_protocol_;
  __fbthrift_serializedData_ = srcObj.__fbthrift_serializedData_;
  __fbthrift_isDeserialized_.field1.store(srcObj.__fbthrift_isDeserialized_.field1.load(std::memory_order::memory_order_relaxed),
                                                      std::memory_order::memory_order_relaxed);
  field1 = ::apache::thrift::detail::st::copy_field<
        ::apache::thrift::type_class::string>(srcObj.field1);
  field2 = srcObj.field2;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field2 = srcObj.__isset.field2;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  __fbthrift_isDeserialized_.field3.store(srcObj.__fbthrift_isDeserialized_.field3.load(std::memory_order::memory_order_relaxed),
                                                      std::memory_order::memory_order_relaxed);
  field3 = srcObj.field3;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field3 = srcObj.__isset.field3;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  field4 = srcObj.field4;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field4 = srcObj.__isset.field4;
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

Foo& Foo::operator=(const Foo& src) {
  Foo tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
Foo::Foo(Foo&& other) noexcept  :
    field1(std::move(other.field1)),
    field2(std::move(other.field2)),
    field3(std::move(other.field3)),
    field4(std::move(other.field4)),
    __isset(other.__isset),
    __fbthrift_protocol_(other.__fbthrift_protocol_),
    __fbthrift_serializedData_(std::move(other.__fbthrift_serializedData_)) {
  const auto relaxed = std::memory_order::memory_order_relaxed;
  __fbthrift_isDeserialized_.field1.store(other.__fbthrift_isDeserialized_.field1, relaxed);
  other.__fbthrift_isDeserialized_.field1.store(true, relaxed);
  __fbthrift_isDeserialized_.field3.store(other.__fbthrift_isDeserialized_.field3, relaxed);
  other.__fbthrift_isDeserialized_.field3.store(true, relaxed);
}
Foo& Foo::operator=(FOLLY_MAYBE_UNUSED Foo&& other) noexcept {
    const auto relaxed = std::memory_order::memory_order_relaxed;
    __fbthrift_protocol_ = other.__fbthrift_protocol_;
    __fbthrift_serializedData_ = std::move(other.__fbthrift_serializedData_);
    this->field1 = std::move(other.field1);
    __fbthrift_isDeserialized_.field1.store(other.__fbthrift_isDeserialized_.field1.exchange(true), relaxed);
    this->field2 = std::move(other.field2);
    this->field3 = std::move(other.field3);
    __fbthrift_isDeserialized_.field3.store(other.__fbthrift_isDeserialized_.field3.exchange(true), relaxed);
    this->field4 = std::move(other.field4);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
Foo::Foo(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::string> field1__arg, ::std::string field2__arg, ::std::vector<::std::int32_t> field3__arg, ::std::vector<::std::int32_t> field4__arg) :
    field1(std::move(field1__arg)),
    field2(std::move(field2__arg)),
    field3(std::move(field3__arg)),
    field4(std::move(field4__arg)) {
  __isset.field2 = true;
  __isset.field3 = true;
  __isset.field4 = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
const ::std::unique_ptr<::std::string>& Foo::__fbthrift_read_field_field1() const {

  if (__fbthrift_isDeserialized_.field1) {
    return field1;
  }

  std::lock_guard<std::mutex> lock(__fbthrift_deserializationMutex_);
  if (!__fbthrift_isDeserialized_.field1) {
    switch (__fbthrift_protocol_) {
      case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
        __fbthrift_read_field_field1_impl<::apache::thrift::CompactProtocolReader>();
        break;
      default:
        CHECK(false) << int(__fbthrift_protocol_);
    }
    __fbthrift_isDeserialized_.field1 = true;
  }
  return field1;
}

::std::unique_ptr<::std::string>& Foo::__fbthrift_read_field_field1() {
  std::as_const(*this).__fbthrift_read_field_field1();
  return field1;
}
const ::std::vector<::std::int32_t>& Foo::__fbthrift_read_field_field3() const {

  if (__fbthrift_isDeserialized_.field3) {
    return field3;
  }

  std::lock_guard<std::mutex> lock(__fbthrift_deserializationMutex_);
  if (!__fbthrift_isDeserialized_.field3) {
    switch (__fbthrift_protocol_) {
      case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
        __fbthrift_read_field_field3_impl<::apache::thrift::CompactProtocolReader>();
        break;
      default:
        CHECK(false) << int(__fbthrift_protocol_);
    }
    __fbthrift_isDeserialized_.field3 = true;
  }
  return field3;
}

::std::vector<::std::int32_t>& Foo::__fbthrift_read_field_field3() {
  std::as_const(*this).__fbthrift_read_field_field3();
  return field3;
}

void Foo::__clear() {
  // clear all fields
  this->field1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->field2 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->field3.clear();
  this->field4.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool Foo::operator==(const Foo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  lhs.field1_ref();
  rhs.field1_ref();
  if (!!lhs.field1 != !!rhs.field1) {
    return false;
  }
  if (!!lhs.field1) {
    if (lhs.field1 != rhs.field1 && !(*lhs.field1 == *rhs.field1)) {
      return false;
    }
  }
  if (!(lhs.field2 == rhs.field2)) {
    return false;
  }
  lhs.field3_ref();
  rhs.field3_ref();
  if (!(lhs.field3 == rhs.field3)) {
    return false;
  }
  if (!(lhs.field4 == rhs.field4)) {
    return false;
  }
  return true;
}

bool Foo::operator<(const Foo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  lhs.field1_ref();
  rhs.field1_ref();
  if (!!lhs.field1 != !!rhs.field1) {
    return !!lhs.field1 < !!rhs.field1;
  }
  if (!!lhs.field1) {
    if (lhs.field1 != rhs.field1 && !(*lhs.field1 == *rhs.field1)) {
      return *lhs.field1 < *rhs.field1;
    }
  }
  if (!(lhs.field2 == rhs.field2)) {
    return lhs.field2 < rhs.field2;
  }
  lhs.field3_ref();
  rhs.field3_ref();
  if (!(lhs.field3 == rhs.field3)) {
    return lhs.field3 < rhs.field3;
  }
  if (!(lhs.field4 == rhs.field4)) {
    return lhs.field4 < rhs.field4;
  }
  return false;
}

const ::std::vector<::std::int32_t>& Foo::get_field4() const& {
  return field4;
}

::std::vector<::std::int32_t> Foo::get_field4() && {
  return std::move(field4);
}


void swap(Foo& a, Foo& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2_ref().value(), b.field2_ref().value());
  swap(a.field3_ref().value(), b.field3_ref().value());
  swap(a.field4_ref().value(), b.field4_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void Foo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Foo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Foo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Foo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Foo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Foo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Foo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Foo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::test
